{"ast":null,"code":"var _jsxFileName = \"/Users/kyoung/soundbrew-react/src/components/ProtectedRoute.js\";\n// src/components/ProtectedRoute.js\nimport { Navigate } from \"react-router-dom\";\nimport TokenUtil from \"../utils/token/tokenUtil\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  allowedRoles,\n  children\n}) => {\n  // localStorage에서 토큰을 가져옴\n  const token = TokenUtil.getToken();\n\n  // 토큰이 없거나 만료되었으면 로그인 페이지로 이동\n  if (!token || TokenUtil.isTokenExpired(token)) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login1\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  }\n\n  // 토큰에서 사용자 정보를 추출\n  const userInfo = TokenUtil.getUserInfo(token);\n  if (!userInfo || !userInfo.roles) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login2\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n\n  // 현재 사용자의 역할이 allowedRoles에 포함되어 있는지 확인\n  const isAuthorized = allowedRoles.some(role => userInfo.roles.includes(role));\n  if (!isAuthorized) {\n    alert(\"접근 권한이 없습니다.\");\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/3\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n  return children;\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Navigate","TokenUtil","jsxDEV","_jsxDEV","ProtectedRoute","allowedRoles","children","token","getToken","isTokenExpired","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","userInfo","getUserInfo","roles","isAuthorized","some","role","includes","alert","_c","$RefreshReg$"],"sources":["/Users/kyoung/soundbrew-react/src/components/ProtectedRoute.js"],"sourcesContent":["// src/components/ProtectedRoute.js\nimport { Navigate } from \"react-router-dom\";\nimport TokenUtil from \"../utils/token/tokenUtil\";\n\nconst ProtectedRoute = ({ allowedRoles, children }) => {\n  // localStorage에서 토큰을 가져옴\n  const token = TokenUtil.getToken();\n  \n  // 토큰이 없거나 만료되었으면 로그인 페이지로 이동\n  if (!token || TokenUtil.isTokenExpired(token)) {\n    return <Navigate to=\"/login1\" replace />;\n  }\n  \n  // 토큰에서 사용자 정보를 추출\n  const userInfo = TokenUtil.getUserInfo(token);\n  \n  if (!userInfo || !userInfo.roles) {\n    return <Navigate to=\"/login2\" replace />;\n  }\n  \n  // 현재 사용자의 역할이 allowedRoles에 포함되어 있는지 확인\n  const isAuthorized = allowedRoles.some(role => userInfo.roles.includes(role));\n  \n  if (!isAuthorized) {\n    alert(\"접근 권한이 없습니다.\");\n    return <Navigate to=\"/3\" replace />;\n  }\n  \n  return children;\n};\n\nexport default ProtectedRoute;\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,SAAS,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,cAAc,GAAGA,CAAC;EAAEC,YAAY;EAAEC;AAAS,CAAC,KAAK;EACrD;EACA,MAAMC,KAAK,GAAGN,SAAS,CAACO,QAAQ,CAAC,CAAC;;EAElC;EACA,IAAI,CAACD,KAAK,IAAIN,SAAS,CAACQ,cAAc,CAACF,KAAK,CAAC,EAAE;IAC7C,oBAAOJ,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC,SAAS;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC1C;;EAEA;EACA,MAAMC,QAAQ,GAAGf,SAAS,CAACgB,WAAW,CAACV,KAAK,CAAC;EAE7C,IAAI,CAACS,QAAQ,IAAI,CAACA,QAAQ,CAACE,KAAK,EAAE;IAChC,oBAAOf,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC,SAAS;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC1C;;EAEA;EACA,MAAMI,YAAY,GAAGd,YAAY,CAACe,IAAI,CAACC,IAAI,IAAIL,QAAQ,CAACE,KAAK,CAACI,QAAQ,CAACD,IAAI,CAAC,CAAC;EAE7E,IAAI,CAACF,YAAY,EAAE;IACjBI,KAAK,CAAC,cAAc,CAAC;IACrB,oBAAOpB,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC,IAAI;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACrC;EAEA,OAAOT,QAAQ;AACjB,CAAC;AAACkB,EAAA,GAzBIpB,cAAc;AA2BpB,eAAeA,cAAc;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}